const { createClient } = require('@supabase/supabase-js');
const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../.env') });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_SERVICE_KEY;

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkBeforeRegeneration() {
  console.log('=== –ü–ï–†–ï–í–Ü–†–ö–ê –ü–ï–†–ï–î –†–ï–ì–ï–ù–ï–†–ê–¶–Ü–Ñ–Æ ===\n');
  
  const { data: config } = await supabase
    .from('app_config')
    .select('id, override_data, self_data')
    .eq('id', 'breed_field_account_id')
    .single();
  
  if (!config) {
    console.error('Field breed_field_account_id not found!');
    return;
  }
  
  console.log('breed_field_account_id:');
  console.log('  override_data:', JSON.stringify(config.override_data, null, 2));
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ—ó –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
  if (config.override_data?.test === 'test121212') {
    console.log('\n‚úÖ –ö–∞—Å—Ç–æ–º–Ω–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å "test": "test121212" –ø—Ä–∏—Å—É—Ç–Ω—è');
  } else {
    console.log('\n‚ùå –ö–∞—Å—Ç–æ–º–Ω–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å "test" –ù–ï –∑–Ω–∞–π–¥–µ–Ω–∞');
  }
  
  console.log('\nüìù –í—Å—ñ –∫–ª—é—á—ñ –≤ override_data:', Object.keys(config.override_data || {}));
  console.log('\n–¢–µ–ø–µ—Ä –∑–∞–ø—É—Å—Ç—ñ—Ç—å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—é:');
  console.log('  echo "y" | node scripts/generate-sql-inserts.cjs --breed-only');
  console.log('\n–ü—ñ—Å–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–∞–ø—É—Å—Ç—ñ—Ç—å:');
  console.log('  node scripts/test-breed-account-field.cjs --after');
}

async function checkAfterRegeneration() {
  console.log('=== –ü–ï–†–ï–í–Ü–†–ö–ê –ü–Ü–°–õ–Ø –†–ï–ì–ï–ù–ï–†–ê–¶–Ü–á ===\n');
  
  const { data: config } = await supabase
    .from('app_config')
    .select('id, override_data, self_data')
    .eq('id', 'breed_field_account_id')
    .single();
  
  if (!config) {
    console.error('Field breed_field_account_id not found!');
    return;
  }
  
  console.log('breed_field_account_id:');
  console.log('  override_data:', JSON.stringify(config.override_data, null, 2));
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ—ó –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
  const testValue = config.override_data?.test;
  
  console.log('\n' + '='.repeat(60));
  if (testValue === 'test121212') {
    console.log('üéâ –£–°–ü–Ü–•! –ö–∞—Å—Ç–æ–º–Ω–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å "test": "test121212" –ó–ë–ï–†–ï–ñ–ï–ù–ê!');
  } else if (testValue) {
    console.log(`‚ö†Ô∏è –í–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å "test" –∑–º—ñ–Ω–∏–ª–∞—Å—è: "${testValue}" (–æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å "test121212")`);
  } else {
    console.log('‚ùå –ü–û–ú–ò–õ–ö–ê! –ö–∞—Å—Ç–æ–º–Ω–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å "test" –í–¢–†–ê–ß–ï–ù–ê!');
  }
  console.log('='.repeat(60));
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∫–∞—Å—Ç–æ–º–Ω–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å –ù–ï –≤ self_data
  if (config.self_data?.test) {
    console.log('\n‚ö†Ô∏è –£–≤–∞–≥–∞: –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å "test" –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ self_data (–º–∞—î –±—É—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤ override_data)');
  } else {
    console.log('\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å "test" –≤—ñ–¥—Å—É—Ç–Ω—è –≤ self_data');
  }
  
  console.log('\nüìù –í—Å—ñ –∫–ª—é—á—ñ –≤ override_data –ø—ñ—Å–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:', Object.keys(config.override_data || {}));
}

// Main execution
const isAfter = process.argv.includes('--after');

if (isAfter) {
  checkAfterRegeneration().catch(console.error);
} else {
  checkBeforeRegeneration().catch(console.error);
}